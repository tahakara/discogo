{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/disco/discover": {
            "get": {
                "description": "Retrieves a list of services filtered by query parameters such as service type, provider, region, zone, network ID, subnet ID, instance ID, and version. Supports pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DiscoGo"
                ],
                "summary": "Discover services",
                "parameters": [
                    {
                        "enum": [
                            "mock",
                            "test",
                            "perftest",
                            "loadgen",
                            "staging",
                            "dev",
                            "debug",
                            "mq",
                            "eventbus",
                            "notify",
                            "email",
                            "sms",
                            "push",
                            "inmsg",
                            "chat",
                            "monitor",
                            "log",
                            "alert",
                            "health",
                            "cb",
                            "lb",
                            "discovery",
                            "config",
                            "util",
                            "helper",
                            "migrate",
                            "cleanup",
                            "archive",
                            "maint",
                            "other",
                            "stream",
                            "audio",
                            "live",
                            "transcode",
                            "abr",
                            "drm",
                            "quality",
                            "user",
                            "auth",
                            "authz",
                            "profile",
                            "prefs",
                            "social",
                            "watchlist",
                            "history",
                            "web",
                            "mobile",
                            "admin",
                            "cdn",
                            "assets",
                            "img",
                            "video",
                            "catalog",
                            "recommend",
                            "search",
                            "personal",
                            "ingest",
                            "metadata",
                            "subtitle",
                            "thumb",
                            "sub",
                            "billing",
                            "payment",
                            "pricing",
                            "trial",
                            "entitle",
                            "revenue",
                            "secgw",
                            "waf",
                            "fraud",
                            "audit",
                            "encrypt",
                            "kms",
                            "comply",
                            "threat",
                            "workflow",
                            "scheduler",
                            "pipeline",
                            "etl",
                            "batch",
                            "eventproc",
                            "orchestrate",
                            "3rdapi",
                            "partner",
                            "social",
                            "paygate",
                            "cdnint",
                            "cloudstor",
                            "tracker",
                            "gw",
                            "rest",
                            "graphql",
                            "grpc",
                            "ws",
                            "webhook",
                            "ratelimit",
                            "db",
                            "analyticsdb",
                            "cache",
                            "file",
                            "object",
                            "datalake",
                            "backup",
                            "sync",
                            "analytics",
                            "rtanalytics",
                            "abtest",
                            "flags",
                            "ml",
                            "ds",
                            "report",
                            "metrics"
                        ],
                        "type": "string",
                        "description": "Service type to discover",
                        "name": "servicetype",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "healthy",
                            "unknown",
                            "suspicious",
                            "registered",
                            "deregistered"
                        ],
                        "type": "string",
                        "description": "Service status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "provider1",
                            "provider2",
                            "..."
                        ],
                        "type": "string",
                        "description": "Service provider",
                        "name": "provider",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Region",
                        "name": "region",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Zone",
                        "name": "zone",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Network ID",
                        "name": "networkid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Subnet ID",
                        "name": "subnetid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Instance ID",
                        "name": "instanceid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Service version",
                        "name": "version",
                        "in": "query"
                    },
                    {
                        "maximum": 10,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Number of results per page (1-10)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Page offset (\u003e= 0)",
                        "name": "pageoffset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of discovered services",
                        "schema": {
                            "$ref": "#/definitions/routes.DiscoverResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/routes.DiscoverResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/routes.DiscoverResponse"
                        }
                    }
                }
            }
        },
        "/disco/health": {
            "get": {
                "description": "Returns the health status of the API and Redis connection",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DiscoGo"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.HealthCheckResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.HealthCheckResponse"
                        }
                    }
                }
            }
        },
        "/disco/heartbeat": {
            "get": {
                "description": "Checks the health of a service by UUID and updates its status in Redis.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DiscoGo"
                ],
                "summary": "Heartbeat endpoint",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service UUID",
                        "name": "uuid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.HeartbeatResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.HeartbeatResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.HeartbeatResponse"
                        }
                    }
                }
            }
        },
        "/disco/register": {
            "post": {
                "description": "Registers a new service instance with the discovery system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DiscoGo"
                ],
                "summary": "Register a new service",
                "parameters": [
                    {
                        "description": "Service registration payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestdto.RegisterRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.RegisterResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/routes.RegisterResponse"
                        }
                    }
                }
            }
        },
        "/disco/version": {
            "get": {
                "description": "Retrieves the version information of the service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DiscoGo"
                ],
                "summary": "Get service version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.VersionResponse"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/utils.JSONResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "requestdto.RegisterRequestDTO": {
            "type": "object",
            "required": [
                "cluster",
                "instanceID",
                "name",
                "networkDomain",
                "networkID",
                "provider",
                "region",
                "subnetID",
                "type",
                "version",
                "zone"
            ],
            "properties": {
                "addr4": {
                    "type": "string"
                },
                "addr6": {
                    "type": "string"
                },
                "cluster": {
                    "type": "string"
                },
                "instanceID": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 3
                },
                "networkDomain": {
                    "type": "string"
                },
                "networkID": {
                    "type": "string"
                },
                "port4": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                },
                "port6": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                },
                "provider": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "subnetID": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "routes.DiscoverResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "providerTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "serviceTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/routes.ServiceInfo"
                    }
                },
                "status": {
                    "type": "string"
                },
                "statusTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "routes.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/routes.HealthStatus"
                }
            }
        },
        "routes.HealthStatus": {
            "type": "string",
            "enum": [
                "healthy",
                "unhealthy"
            ],
            "x-enum-varnames": [
                "StatusHealthy",
                "StatusUnhealthy"
            ]
        },
        "routes.HeartbeatResponse": {
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "routes.RegisterResponse": {
            "type": "object",
            "properties": {
                "health_check_cycle": {
                    "description": "Only on success",
                    "type": "integer"
                },
                "reason": {
                    "description": "Only on error",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "service_uuid": {
                    "description": "Only on success",
                    "type": "string"
                },
                "status": {
                    "description": "\"success\" or \"error\"",
                    "type": "string"
                }
            }
        },
        "routes.ServiceInfo": {
            "type": "object",
            "properties": {
                "serviceAddr": {
                    "type": "string"
                },
                "serviceID": {
                    "type": "string"
                }
            }
        },
        "routes.VersionResponse": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "version_name": {
                    "type": "string"
                }
            }
        },
        "utils.JSONResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        }
    }
}